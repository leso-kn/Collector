diff --git a/node_modules/@flyerhq/react-native-link-preview/lib/LinkPreview.js b/node_modules/@flyerhq/react-native-link-preview/lib/LinkPreview.js
index 7ab00a6..66e380c 100644
--- a/node_modules/@flyerhq/react-native-link-preview/lib/LinkPreview.js
+++ b/node_modules/@flyerhq/react-native-link-preview/lib/LinkPreview.js
@@ -1,12 +1,49 @@
 import * as React from 'react';
 import { Image, LayoutAnimation, Linking, StyleSheet, Text, TouchableWithoutFeedback, View, } from 'react-native';
 import { getPreviewData, oneOf } from './utils';
-export const LinkPreview = React.memo(({ containerStyle, enableAnimation, header, metadataContainerStyle, metadataTextContainerStyle, onPreviewDataFetched, previewData, renderDescription, renderHeader, renderImage, renderLinkPreview, renderMinimizedImage, renderText, renderTitle, requestTimeout = 5000, text, textContainerStyle, touchableWithoutFeedbackProps, }) => {
+import FastImage from "react-native-fast-image";
+export const LinkPreview = React.memo(({ containerStyle, enableAnimation, header, isDarkTheme, metadataContainerStyle, metadataTextContainerStyle, onPreviewDataFetched, previewData, renderDescription, renderHeader, renderImage, renderLinkPreview, renderMinimizedImage, renderText, renderTitle, requestTimeout = 5000, text, textContainerStyle, touchableWithoutFeedbackProps, onLayout}) => {
     const [containerWidth, setContainerWidth] = React.useState(0);
     const [data, setData] = React.useState(previewData);
     const aspectRatio = (data === null || data === void 0 ? void 0 : data.image)
         ? data.image.width / data.image.height
         : undefined;
+    const styles = StyleSheet.create({
+        description: {
+            marginTop: 6,
+            color: isDarkTheme?undefined:"black"
+        },
+        header: {
+            marginBottom: 6,
+            color: isDarkTheme?undefined:"black"
+        },
+        image: {
+            alignSelf: 'center',
+            backgroundColor: '#f7f7f8',
+        },
+        metadataContainer: {
+            flexDirection: 'row',
+            marginTop: -2,
+        },
+        metadataTextContainer: {
+            flex: 1,
+        },
+        minimizedImage: {
+            borderRadius: 12,
+            height: 48,
+            marginLeft: 4,
+            width: 48,
+        },
+        textContainer: {
+            marginHorizontal: 10,
+            marginVertical: 16,
+        },
+        title: {
+            fontWeight: 'bold',
+            marginTop:2,
+            color: isDarkTheme?undefined:"black"
+        },
+    });
     React.useEffect(() => {
         let isCancelled = false;
         if (previewData) {
@@ -55,18 +92,13 @@ export const LinkPreview = React.memo(({ containerStyle, enableAnimation, header
         // aspectRatio shouldn't be undefined, just an additional check
         /* istanbul ignore next */
         const ar = aspectRatio !== null && aspectRatio !== void 0 ? aspectRatio : 1;
-        return oneOf(renderImage, React.createElement(Image, { accessibilityRole: 'image', resizeMode: 'contain', source: { uri: image.url }, style: StyleSheet.flatten([
+        return oneOf(renderImage, React.createElement(FastImage, { accessibilityRole: 'image', resizeMode: 'contain', source: { uri: image.url }, style: StyleSheet.flatten([
                 styles.image,
-                ar < 1
-                    ? {
-                        height: containerWidth,
-                        minWidth: 170,
-                        width: containerWidth * ar,
-                    }
-                    : {
+                 {
                         height: containerWidth / ar,
                         maxHeight: containerWidth,
                         width: containerWidth,
+                     flex:1
                     },
             ]) }))(image);
     };
@@ -77,7 +109,7 @@ export const LinkPreview = React.memo(({ containerStyle, enableAnimation, header
                     textContainerStyle,
                 ]) },
                 renderHeaderNode(),
-                renderTextNode(),
+             //   renderTextNode(),
                 ((data === null || data === void 0 ? void 0 : data.description) ||
                     ((data === null || data === void 0 ? void 0 : data.image) &&
                         aspectRatio === 1 &&
@@ -108,41 +140,10 @@ export const LinkPreview = React.memo(({ containerStyle, enableAnimation, header
     };
     const renderTextNode = () => oneOf(renderText, React.createElement(Text, null, text))(text);
     const renderTitleNode = (title) => {
-        return oneOf(renderTitle, React.createElement(Text, { numberOfLines: 2, style: styles.title }, title))(title);
+        return oneOf(renderTitle, React.createElement(Text, { numberOfLines: 1, style: styles.title }, title))(title);
     };
     return (React.createElement(TouchableWithoutFeedback, { accessibilityRole: 'button', onPress: handlePress, ...touchableWithoutFeedbackProps },
         React.createElement(View, { onLayout: handleContainerLayout, style: containerStyle }, renderLinkPreviewNode())));
 });
-const styles = StyleSheet.create({
-    description: {
-        marginTop: 4,
-    },
-    header: {
-        marginBottom: 6,
-    },
-    image: {
-        alignSelf: 'center',
-        backgroundColor: '#f7f7f8',
-    },
-    metadataContainer: {
-        flexDirection: 'row',
-        marginTop: 16,
-    },
-    metadataTextContainer: {
-        flex: 1,
-    },
-    minimizedImage: {
-        borderRadius: 12,
-        height: 48,
-        marginLeft: 4,
-        width: 48,
-    },
-    textContainer: {
-        marginHorizontal: 24,
-        marginVertical: 16,
-    },
-    title: {
-        fontWeight: 'bold',
-    },
-});
+
 //# sourceMappingURL=LinkPreview.js.map
\ No newline at end of file
diff --git a/node_modules/@flyerhq/react-native-link-preview/lib/utils.js b/node_modules/@flyerhq/react-native-link-preview/lib/utils.js
index c1aff89..450dd89 100644
--- a/node_modules/@flyerhq/react-native-link-preview/lib/utils.js
+++ b/node_modules/@flyerhq/react-native-link-preview/lib/utils.js
@@ -137,6 +137,9 @@ export const getPreviewData = async (text, requestTimeout = 5000) => {
             }
             previewData.image = images.sort((a, b) => b.height * b.width - a.height * a.width)[0];
         }
+        if (!previewData.image){
+            previewData.image = await getPreviewDataImage("https://i.imgur.com/QEMQckD.png")
+        }
         return previewData;
     }
     catch (_c) {
@@ -146,7 +149,7 @@ export const getPreviewData = async (text, requestTimeout = 5000) => {
 /* istanbul ignore next */
 export const getPreviewDataImage = async (url) => {
     if (!url)
-        return;
+        return
     try {
         const { height, width } = await getImageSize(url);
         const aspectRatio = width / (height || 1);
@@ -163,7 +166,8 @@ export const oneOf = (truthy, falsy) => (...args) => {
 export const REGEX_EMAIL = /([a-zA-Z0-9+._-]+@[a-zA-Z0-9._-]+\.[a-zA-Z0-9_-]+)/g;
 export const REGEX_IMAGE_CONTENT_TYPE = /image\/*/g;
 // Consider empty line after img tag and take only the src field, space before to not match data-src for example
-export const REGEX_IMAGE_TAG = /<img[\n\r]*.*? src=["'](.*?)["']/g;
+export const REGEX_IMAGE_TAG = /<img[\n\r]*.*?src=["'](.*?)["']/g;
+export const REGEX_FAVICON = /<link.*?href=["'].*?favicon.ico["']>/g;
 export const REGEX_LINK = /((http|ftp|https):\/\/)?([\w_-]+(?:(?:\.[\w_-]+)+))([\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])?/i;
 // Some pages write content before the name/property, some use single quotes instead of double
 export const REGEX_META = /<meta.*?(property|name)=["'](.*?)["'].*?content=["'](.*?)["'].*?>/g;
